// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: workflowserver.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_workflowserver_2eproto__INCLUDED
#define GRPC_workflowserver_2eproto__INCLUDED

#include "workflowserver.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace workflowserver {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "workflowserver.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // test using
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::workflowserver::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // subscribe service
    virtual ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::workflowserver::PubSubReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // publish service
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::workflowserver::PubSubReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>> AsyncPublish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::workflowserver::PubSubReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::workflowserver::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::workflowserver::PubSubReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::workflowserver::PubSubReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>> AsyncPublish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::workflowserver::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::workflowserver::PubSubReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::workflowserver::PubSubRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // test using
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::workflowserver::HelloRequest* request, ::workflowserver::HelloReply* response);
    // subscribe service
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response);
    // publish service
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::workflowserver::HelloRequest* request, ::workflowserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::workflowserver::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::workflowserver::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::workflowserver::PubSubRequest* request, ::grpc::ServerAsyncResponseWriter< ::workflowserver::PubSubReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::workflowserver::PubSubRequest* request, ::grpc::ServerAsyncResponseWriter< ::workflowserver::PubSubReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_Subscribe<WithAsyncMethod_Publish<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::workflowserver::HelloRequest* request, ::workflowserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::workflowserver::HelloRequest, ::workflowserver::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::workflowserver::HelloRequest* request, ::workflowserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::workflowserver::HelloRequest,::workflowserver::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::workflowserver::PubSubRequest, ::workflowserver::PubSubReply>(std::bind(&WithStreamedUnaryMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::workflowserver::PubSubRequest,::workflowserver::PubSubReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::workflowserver::PubSubRequest, ::workflowserver::PubSubReply>(std::bind(&WithStreamedUnaryMethod_Publish<BaseClass>::StreamedPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::workflowserver::PubSubRequest* request, ::workflowserver::PubSubReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::workflowserver::PubSubRequest,::workflowserver::PubSubReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Publish<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Publish<Service > > > StreamedService;
};

}  // namespace workflowserver


#endif  // GRPC_workflowserver_2eproto__INCLUDED
